service: RedstoneCircuitDictionary

provider:
  name: aws
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    DictionaryTABLE: ${opt:stage, 'dev'}-redstoneCircuitDictionary-words
    CommunityTABLE: ${opt:stage, 'dev'}-redstoneCircuitDictionary-cummunities
    MessageTABLE: ${opt:stage, 'dev'}-redstoneCircuitDictionary-messages
    REGION: ${self:provider.region}
    COGNITO_POOL_ID: !Ref CognitoUserPool
  ecr:
    images:
      redstone-circuit-dictionary-https:
        path: .
        file: docs/Dockerfile.https
      redstone-circuit-dictionary-cognito:
        path: .
        file: docs/Dockerfile.cognito
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DictionaryTABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DictionaryTABLE}/index/poster_index"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CommunityTABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MessageTABLE}"
    - Effect: Allow
      Action:
        - cognito-idp:AdminConfirmSignUp
      Resource: "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

functions:
  httpHandler:
    image:
        name: redstone-circuit-dictionary-https
    events:
      - http:
          path: dictionary
          method: get
      - http:
          path: dictionary
          method: post
          cors: 
            origins:
              - 'http://localhost:3000'
              - 'https://staging.d1631t3ap8rd8k.amplifyapp.com'
            headers:
              - Content-Type
              - Authorization
              - x-processing-type1
              - x-processing-type2
            allowCredentials: true
      - http:
          path: dictionary/{id}
          method: put
          cors: 
            origins:
              - 'http://localhost:3000'
              - 'https://staging.d1631t3ap8rd8k.amplifyapp.com'
            headers:
              - Content-Type
              - Authorization
              - x-processing-type1
              - x-processing-type2
            allowCredentials: true
      - http:
          path: dictionary/{id}
          method: delete
          cors:
            origins:
              - 'http://localhost:3000' 
              - 'https://staging.d1631t3ap8rd8k.amplifyapp.com' 
            headers:
              - Content-Type
              - Authorization
              - x-processing-type1
              - x-processing-type2
            allowCredentials: true
    environment:
      DictionaryTABLE: ${self:provider.environment.DictionaryTABLE}
      CommunityTABLE: ${self:provider.environment.CommunityTABLE}
      MessageTABLE: ${self:provider.environment.MessageTABLE}
  confirmSignUp:
    image:
        name: redstone-circuit-dictionary-cognito
    events:
      - cognitoUserPool:
          pool: ${opt:stage, 'dev'}-redstoneCircuitDictionary-userPool
          trigger: PreSignUp
          existing: true

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DictionaryTABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: poster
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: poster_index
            KeySchema: 
              - AttributeName: poster
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL            
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBCommunityTABLE:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.CommunityTABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBMessageTABLE:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.MessageTABLE}
        AttributeDefinitions:
          - AttributeName: community_id
            AttributeType: N
          - AttributeName: user_name
            AttributeType: S
        KeySchema:
          - AttributeName: community_id
            KeyType: HASH
          - AttributeName: user_name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage, 'dev'}-redstoneCircuitDictionary-userPool
        UsernameConfiguration:
          CaseSensitive: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: false
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            TemporaryPasswordValidityDays: 7
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        MfaConfiguration: OFF
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: false
          DeviceOnlyRememberedOnUserPrompt: false
    CognitoUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: AdminGroup
        UserPoolId: !Ref CognitoUserPool
        Description: "Group for admin users"
        Precedence: 1
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${opt:stage, 'dev'}-redstoneCircuitDictionary
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
        SupportedIdentityProviders:
          - COGNITO

plugins:
  - serverless-plugin-scripts

custom:
  scripts:
    hooks:
      # Dockerfileは基本的に親のディレクトリを参照できないので、デプロイ前に複数のDockerイメージをビルドする
      before:deploy:deploy: |
        docker build -t redstone-circuit-dictionary-https -f ./docs/Dockerfile.https .
        docker build -t redstone-circuit-dictionary-cognito -f ./docs/Dockerfile.cognito . 
