service: redstoneCircuitDictionary

provider:
  name: aws
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_TABLE: ${opt:stage, 'dev'}-redstoneCircuitDictionary-words
  ecr:
    images:
      redstoneCircuitDictionary-http:
        path: ./
        file: Dockerfile
      redstoneCircuitDictionary-cognito:
        path: ./
        file: Dockerfile.cognito
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/poster_index"
    - Effect: Allow
      Action:
        - cognito-idp:AdminConfirmSignUp
      Resource: "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:resources.Resources.CognitoUserPool.Properties.UserPoolName}"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

functions:
  httpHandler:
    image:
        name: redstoneCircuitDictionary-http
    events:
      - http:
          path: dictionary
          method: get
          cors: true 
      - http:
          path: dictionary
          method: post
          cors: true
      - http:
          path: dictionary
          method: delete
          cors:
            origins:
              - 'http://localhost:3000' 
              - 'https://staging.d1631t3ap8rd8k.amplifyapp.com' 
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
  confirmSignUp:
    image:
        name: redstoneCircuitDictionary-cognito
    events:
      - cognitoUserPool:
          pool: ${opt:stage, 'dev'}_RedstoneCircuitDictonary_UserPool
          trigger: PreSignUp
    environment:
      REGION: ${self:provider.region}

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: Number
            AttributeType: N
          - AttributeName: poster
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: Number
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: poster_index
            KeySchema: 
              - AttributeName: poster
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL            
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage, 'dev'}_RedstoneCircuitDictonary_UserPool
        UsernameConfiguration:
          CaseSensitive: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: false
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            TemporaryPasswordValidityDays: 7
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        MfaConfiguration: OFF
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: false
          DeviceOnlyRememberedOnUserPrompt: false

    CognitoUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: AdminGroup
        UserPoolId:
          Ref: CognitoUserPool
        Description: "Group for admin users"
        Precedence: 1

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${opt:stage, 'dev'}_RedstoneCircuitDictonary
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
        SupportedIdentityProviders:
          - COGNITO
